{"version":3,"sources":["components/ToggleMode.js","components/Nav.js","components/JednaZemlja.js","components/UbaciZemlje.js","components/JednaZemljaInfoDetalji.js","components/JednaZemljaInfo.js","App.js","components/useTheme.js","serviceWorker.js","index.js"],"names":["ToggleMode","defaultToggle","arguments","length","undefined","toggle","_useState","useState","savedToggle","storage","getItem","JSON","parse","_useState2","Object","slicedToArray","setToggle","useEffect","setItem","stringify","react_default","a","createElement","styled_components_browser_esm","theme","className","onClick","e","setTheme","mode","objectSpread","Nav","components_ToggleMode","JednaZemlja","_ref","name","flag","population","region","capital","react_router_dom","to","concat","toLowerCase","src","alt","toLocaleString","UbaciZemlje","zemlje","setItems","_useState3","_useState4","search","setSearch","_useState5","savedSelect","_useState6","select","setSelect","ucitavanjeljeZemlje","asyncToGenerator","regenerator_default","mark","_callee","data","wrap","_context","prev","next","fetch","sent","json","stop","apply","this","selectFilter","filter","zemlja","searchHit","indexOf","filterPass","type","placeholder","value","onChange","target","id","map","components_JednaZemlja","key","alpha3Code","JednaZemljaInfoDetalji","nativeName","topLevelDomain","currencies","languages","borders","symbol","JednaZemljaInfo","match","fetchItem","console","log","zemljaDetalji","_ref2","params","components_JednaZemljaInfoDetalji","getBackground","style","light","dark","getBackground2","getForeground","GlobalStyle","createGlobalStyle","_templateObject","App","defaultTheme","savedTheme","_setTheme","objectWithoutProperties","useTheme","Fragment","components_Nav","react_router","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.faf1e419.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {ThemeConsumer} from 'styled-components';\r\nimport storage from 'local-storage-fallback';\r\n\r\nexport function ToggleMode(defaultToggle = {toggle:false}) {\r\n\r\n    const [toggle, setToggle] = useState(getInitialToggle);\r\n\r\n    function getInitialToggle () {\r\n        const savedToggle = storage.getItem('toggle');\r\n        return savedToggle ? JSON.parse(savedToggle) : defaultToggle;\r\n      }\r\n\r\n      useEffect(()=>{\r\n        storage.setItem('toggle', JSON.stringify(toggle))\r\n      },[toggle]);\r\n\r\n    const updateToggle = (e) => {\r\n        setToggle(!toggle);\r\n      }\r\n\r\nreturn (\r\n    \r\n    <ThemeConsumer>\r\n    {theme => (<button className={ toggle ? \"theme\" : \"theme theme2\"} onClick={e => {theme.setTheme(theme.mode === 'dark' ? {...theme, mode : 'light'} : {...theme, mode : 'dark'});(updateToggle())}}\r\n    ><span><i className=\"material-icons\">{toggle ? \"brightness_5\" : \"brightness_4\"}</i>{toggle ? \"Light Mode\" : \"Dark Mode\"}</span></button>)}\r\n    </ThemeConsumer>\r\n\r\n);\r\n}\r\n\r\nexport default ToggleMode;","import React from 'react';\r\nimport '../App.css';\r\nimport ToggleMode from '../components/ToggleMode';\r\n\r\n\r\nfunction Nav() {\r\n  return (\r\n    <div>\r\n        <nav>\r\n        <div className=\"wrapper\">\r\n            <h1>Where in the world?</h1>\r\n            <ToggleMode/>\r\n        </div>\r\n        </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport '../App.css';\r\n\r\nconst JednaZemlja = ({name, flag, population, region, capital}) => {\r\n  return (\r\n    <Link to={`/JednaZemljaInfo/${name.toLowerCase()}`}>\r\n        <div className={`country ${name.toLowerCase()}`}>\r\n            <div className=\"flag_container\">\r\n                <img src={flag} alt={name} />\r\n            </div>\r\n            <div className=\"info_container\">\r\n                <h2><span>{name}</span></h2>\r\n                <p>Population: <span>{population.toLocaleString()}</span></p>\r\n                <p>Region: <span>{region}</span></p>\r\n                <p>Capital: <span>{capital}</span></p>\r\n            </div>\r\n        </div>\r\n    </Link>\r\n  );\r\n}\r\n\r\nexport default JednaZemlja;","import React, {useEffect, useState} from 'react';\r\nimport JednaZemlja from './JednaZemlja';\r\nimport storage from 'local-storage-fallback';\r\n\r\nconst UbaciZemlje = () => {\r\n\r\n    const [zemlje, setItems] = useState([]);\r\n    const [search, setSearch] = useState('');\r\n    const [select, setSelect] = useState(getInitialSelect);\r\n\r\n\r\n    useEffect(() => {\r\n        ucitavanjeljeZemlje();\r\n    }, []);\r\n\r\n    useEffect(()=>{\r\n        storage.setItem('kontinent', JSON.stringify(select))\r\n      },[select]);\r\n\r\n\r\n    function getInitialSelect () {\r\n        const savedSelect = storage.getItem('kontinent');\r\n        return savedSelect ? JSON.parse(savedSelect) : \"All\";\r\n      }\r\n\r\n    const URL_link = `https://restcountries.eu/rest/v2/all`;\r\n\r\n    const ucitavanjeljeZemlje = async () => {\r\n        const data = await fetch (URL_link);\r\n        const zemlje = await data.json();\r\n        //console.log(zemlje);\r\n        setItems(zemlje);\r\n    };\r\n\r\n    const updateSearch = (e) => {\r\n        setSearch(e.target.value);\r\n        //console.log(search);\r\n      }\r\n\r\n    const updateSelect = (e) => {\r\n        setSelect(e.target.value);\r\n        //console.log(select);\r\n    }\r\n  \r\n    \r\n    const selectFilter = zemlje.filter((zemlja) => {\r\n        const searchHit = (zemlja.name.toLowerCase().indexOf(search) === 0);\r\n        const filterPass = ((select === 'All') || (zemlja.region === select));\r\n        if ( searchHit && filterPass ) return true;\r\n        return false;\r\n      });\r\n\r\n    return (\r\n        \r\n        <div className=\"container\">\r\n\r\n            <div className=\"search_bar\">\r\n                <div className=\"search_countries\">\r\n                    <input type=\"text\" placeholder=\"Search by country...\" value={search} onChange={updateSearch}/>\r\n                </div>\r\n                <div className=\"select_countries\">\r\n                    <select className=\"region\" value={select} id=\"countries\"onChange={updateSelect}>\r\n                        <option value=\"All\">All</option>\r\n                        <option value=\"Africa\">Africa</option>\r\n                        <option value=\"Americas\">Americas</option>\r\n                        <option value=\"Asia\">Asia</option>  \r\n                        <option value=\"Europe\">Europe</option>  \r\n                        <option value=\"Oceania\">Oceania</option>  \r\n                    </select>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"atlas\">\r\n                {\r\n                    selectFilter.map(zemlja => (\r\n                    <JednaZemlja \r\n                    key={zemlja.alpha3Code}\r\n                    name={zemlja.name}\r\n                    flag={zemlja.flag}\r\n                    population={zemlja.population}\r\n                    region={zemlja.region}\r\n                    capital={zemlja.capital}\r\n                    />\r\n            \r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n  \r\n  export default UbaciZemlje;","import React from 'react';\r\nimport '../App2.css';\r\n\r\nconst JednaZemljaInfoDetalji = ({name, flag, nativeName, population, region, capital, topLevelDomain, currencies, languages, borders}) => {\r\n  return (\r\n    <div className=\"state-container\">         \r\n        <div className=\"flag-state\">\r\n            <img src={flag} alt={name} />\r\n        </div>\r\n        <div className=\"info-state\">\r\n            <h2><span>{name}</span></h2>\r\n            <div className=\"main-section\">\r\n                <div className=\"part-one\">\r\n                    <p>Native Name: <span>{nativeName}</span></p>\r\n                    <p>Population: <span>{population.toLocaleString()}</span></p>\r\n                    <p>Region: <span>{region}</span></p>\r\n                    <p>Capital: <span>{capital}</span></p>\r\n                </div>\r\n                <div className=\"part-two\">\r\n                    <p>Top Level Domain: <span>{topLevelDomain[0]}</span></p>\r\n                    <p>Currencies: <span>{currencies[0].name}, Symbol: {currencies[0].symbol}</span></p>\r\n                    <p>Language: <span>{languages[0].name}</span></p>\r\n                </div>\r\n            </div>\r\n                <div className=\"part-three\">\r\n                    <p>Border Countries: <span>{borders[0]}</span></p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default JednaZemljaInfoDetalji;","import React, {useState, useEffect} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport JednaZemljaInfoDetalji from './JednaZemljaInfoDetalji';\r\nimport '../App2.css';\r\n\r\nfunction JednaZemljaInfo ({match}) {\r\n\r\n    useEffect(() => {\r\n        fetchItem();\r\n        console.log(match);\r\n    },[]);\r\n\r\n    const [zemljaDetalji, setItem] = useState([]);\r\n\r\n    const fetchItem = async () => {\r\n      const data = await fetch (`https://restcountries.eu/rest/v2/name/${match.params.name}`);\r\n      const zemljaDetalji = await data.json();\r\n      setItem(zemljaDetalji);\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n          <Link to=\"/\"><button className=\"back\"><span><i className=\"material-icons\">arrow_back</i>Back</span></button></Link>\r\n          {zemljaDetalji.map(zemlja => (\r\n                  \r\n                  <JednaZemljaInfoDetalji \r\n                  key={zemlja.alpha3Code}\r\n                  name={zemlja.name}\r\n                  flag={zemlja.flag}\r\n                  nativeName={zemlja.nativeName}\r\n                  population={zemlja.population}\r\n                  region={zemlja.region}\r\n                  capital={zemlja.capital}\r\n                  topLevelDomain={zemlja.topLevelDomain}\r\n                  currencies={zemlja.currencies}\r\n                  languages={zemlja.languages}\r\n                  borders={zemlja.borders}\r\n                  />\r\n               \r\n              ))}\r\n        </div>\r\n      );\r\n\r\n  }\r\n    export default JednaZemljaInfo;\r\n","import React from 'react';\nimport './App.css';\nimport Nav from './components/Nav';\nimport UbaciZemlje from './components/UbaciZemlje';\nimport JednaZemljaInfo from './components/JednaZemljaInfo';\nimport {BrowserRouter as Router , Switch, Route} from 'react-router-dom';\nimport {ThemeProvider, createGlobalStyle} from 'styled-components';\nimport style from 'styled-theming';\nimport useTheme from './components/useTheme';\n\n\nconst getBackground = style('mode', {\n  light: \"#eee\",\n  dark : \"hsl(207, 26%, 17%)\"\n});\n\nconst getBackground2 = style('mode', {\n  light: \"#eee\",\n  dark : \"hsl(209, 23%, 22%)\"\n});\n\nconst getForeground = style('mode', {\n  light: \"hsl(207, 26%, 17%)\",\n  dark : \"#eee\"\n});\n\nconst GlobalStyle = createGlobalStyle`\nbody {\n  background-color : ${getBackground};\n}\n.country, nav, input, select, .back {\n  background-color : ${getBackground2};\n}\n.info_container p, .info_container h2, nav, ::placeholder, .search_countries input, .search_countries::after, .select_countries::after, select, .info-state, .back span, .theme {\n  color : ${getForeground};\n}\n`\nconst App = () => {\n  const theme = useTheme();\n\n  return (\n    <ThemeProvider theme={theme}>\n    <Router>\n    <>\n    <GlobalStyle/>\n    <div className=\"App\">\n      <Nav></Nav>\n      <Switch>\n      <Route path=\"/\" exact component={UbaciZemlje} />\n      <Route path=\"/JednaZemljaInfo\" exact component={JednaZemljaInfo} />\n      <Route path=\"/JednaZemljaInfo/:name\" component={JednaZemljaInfo} />\n      </Switch>\n    </div>\n    </>\n    </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React, {useState, useEffect} from 'react';\r\nimport storage from 'local-storage-fallback';\r\n\r\n\r\n\r\nexport default function useTheme(defaultTheme = {mode: 'light'}) {\r\n    \r\n    const [theme, _setTheme] = useState(getInitialTheme);\r\n\r\n    function getInitialTheme () {\r\n        const savedTheme = storage.getItem('theme');\r\n        return savedTheme ? JSON.parse(savedTheme) : defaultTheme;\r\n      }\r\n\r\n      useEffect(()=>{\r\n        storage.setItem('theme', JSON.stringify(theme))\r\n      },[theme]);\r\n\r\n      return {\r\n        ...theme,\r\n        setTheme: ({setTheme, ...theme}) => _setTheme(theme)\r\n      }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}